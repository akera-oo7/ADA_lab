#include <stdio.h>
#include <sys/time.h>
#include <time.h>
#include <sys/resource.h>

void merge(int arr[], int l, int m, int r);
void mergeSort(int arr[], int l, int r);

int main() {
    struct timeval tv1, tv2;
    int size, input[50], i;
    struct rusage r_usage;

    printf("Enter the input size: ");
    scanf("%d", &size);

    printf("Enter the array elements: ");
    for (i = 0; i < size; i++) {
        scanf("%d", &input[i]);
    }

    gettimeofday(&tv1, NULL);
    mergeSort(input, 0, size - 1);
    gettimeofday(&tv2, NULL);

    printf("\nSorted array is:\n");
    for (i = 0; i < size; i++) {
        printf("%d\t", input[i]);
    }

    printf("Time of merge sort = %f microseconds", (double)(tv2.tv_usec - tv1.tv_usec));

    getrusage(RUSAGE_SELF, &r_usage);
    printf("Memory usage: %ld kilobytes\n", r_usage.ru_maxrss);

    return 0;
}

void merge(int arr[], int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    for (int i = 0; i < n1; i++) {
        L[i] = arr[l + i];
    }
    for (int j = 0; j < n2; j++) {
        R[j] = arr[m + 1 + j];
    }

    int i = 0, j = 0, k = l;

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;

        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        merge(arr, l, m, r);
    }
}

